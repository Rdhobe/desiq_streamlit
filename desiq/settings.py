"""
Django settings for desiq project.

Generated by 'django-admin startproject' using Django 4.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url
from dotenv import load_dotenv
from logging import StreamHandler, FileHandler, Formatter


# Load environment variables from .env file if it exists and not disabled
if os.environ.get('DISABLE_DOTENV') != 'True':
    load_dotenv()
    print("Loaded environment variables from .env file")
    

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure--#00*w5!)fn-!f+_%$+&&3dcjqs6#!04yd(hr=5z+9aq(4w1ki')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True') == 'True'

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'jazzmin',  # Must come before django.contrib.admin
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'channels',
    'core',
    'django_crontab',  # For scheduled tasks
    'social_django',  # Social authentication
    'import_export',
    'guardian',
    'ckeditor',
    'admin_auto_filters',
    'django_celery_beat',
    'django_celery_results',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Add whitenoise for static files
    'django.middleware.cache.UpdateCacheMiddleware',  # Add cache middleware (before common middleware)
    'core.middleware.DatabaseConnectionMiddleware',  # Database connection handling
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.cache.FetchFromCacheMiddleware',  # Add cache middleware (after common middleware)
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'core.middleware.SocialAuthBackendFixMiddleware',  # Fix for social auth backends
    'core.middleware.ExceptionMiddleware',  # Custom exception handling
    'core.middleware.UserActivityMiddleware',  # Track user activity
    'core.middleware.RateLimitMiddleware',  # Rate limiting for high traffic
    'core.middleware.SocialAuthExceptionMiddleware',  # Our custom handler for social auth exceptions
]

ROOT_URLCONF = 'desiq.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'core', 'templates'),
            os.path.join(BASE_DIR, 'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'core.context_processors.global_settings',
                'core.context_processors.user_data',
                'social_django.context_processors.backends',  # Social auth
                'social_django.context_processors.login_redirect',  # Social auth
            ],
            'debug': DEBUG,
        },
    },
]

# Print template directories for debugging
print(f"Template directories: {[template['DIRS'] for template in TEMPLATES]}")
print(f"Template APP_DIRS setting: {TEMPLATES[0]['APP_DIRS']}")

WSGI_APPLICATION = 'desiq.wsgi.application'
ASGI_APPLICATION = 'desiq.asgi.application'

# Channel layers configuration
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer',
    },
}


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# Configure PostgreSQL - either from DATABASE_URL or from environment variables
if os.environ.get('DATABASE_URL'):
    # Use the DATABASE_URL from environment (for deployment)
    DATABASES = {
        'default': dj_database_url.config(conn_max_age=60)
    }
    print(f"Using database from DATABASE_URL")
else:
    # Default PostgreSQL configuration (for local development)
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.environ.get('DB_NAME', 'desiq_db'),
            'USER': os.environ.get('DB_USER', 'postgres'),
            'PASSWORD': os.environ.get('DB_PASSWORD', 'postgres'),
            'HOST': os.environ.get('DB_HOST', 'localhost'),
            'PORT': os.environ.get('DB_PORT', '5432'),
        }
    }
    print(f"Using PostgreSQL configuration for local development")

# Connection pooling settings for PostgreSQL
DATABASES['default']['CONN_MAX_AGE'] = 60  # 60 seconds to prevent stale connections
DATABASES['default']['CONN_HEALTH_CHECKS'] = True

# PostgreSQL connection options
DATABASES['default']['OPTIONS'] = {
    'connect_timeout': 10,
    'keepalives': 1,              # Enable TCP keepalive
    'keepalives_idle': 30,        # Seconds before sending keepalive probes
    'keepalives_interval': 10,    # Seconds between keepalive probes
    'keepalives_count': 5,        # Number of keepalive probes
    'client_encoding': 'UTF8',
}

# Test database connection on startup
try:
    import psycopg2
    db_config = DATABASES['default']
    
    # Get connection parameters from either dj_database_url or direct config
    if 'OPTIONS' in db_config:
        # Direct configuration case
        connection = psycopg2.connect(
            dbname=db_config.get('NAME'),
            user=db_config.get('USER'),
            password=db_config.get('PASSWORD'),
            host=db_config.get('HOST'),
            port=db_config.get('PORT', 5432),
            connect_timeout=10
        )
    else:
        # DATABASE_URL case - parse from URL
        from urllib.parse import urlparse
        url = os.environ.get('DATABASE_URL')
        parsed_url = urlparse(url)
        connection = psycopg2.connect(url)
    
    # Test the connection
    with connection.cursor() as cursor:
        cursor.execute("SELECT 1")
    
    connection.close()
    print("✅ PostgreSQL connection test successful")
except Exception as e:
    print(f"❌ PostgreSQL connection test failed: {e}")
    # Log the error but don't prevent startup

# Email settings
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'rdhobe8@gmail.com')
EMAIL_BACKEND = os.environ.get('EMAIL_BACKEND', 'django.core.mail.backends.console.EmailBackend')

# Gmail API settings
USE_GMAIL_API = os.environ.get('USE_GMAIL_API', False) 
GMAIL_TOKEN_PATH = os.environ.get('GMAIL_TOKEN_PATH', os.path.join(BASE_DIR, 'gmail_token.json'))
GMAIL_CREDENTIALS_PATH = os.environ.get('GMAIL_CREDENTIALS_PATH', os.path.join(BASE_DIR, 'credentials.json'))
# Set Gmail API backend if enabled
if USE_GMAIL_API:
    EMAIL_BACKEND = 'core.gmail_backend.GmailApiEmailBackend'
    print("Gmail API backend set.")
    print(f"Gmail Token Path: {GMAIL_TOKEN_PATH}")
    print(f"Gmail Credentials Path: {GMAIL_CREDENTIALS_PATH}")
# SMTP configuration for sending actual emails in production
else :
    print("Using SMTP backend for email sending.")
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = os.environ.get('EMAIL_HOST')
    EMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))
    EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', True)
    EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
    EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
    
# Example services configuration (for reference):
# Gmail: EMAIL_HOST = 'smtp.gmail.com', EMAIL_PORT = 587, EMAIL_USE_TLS = True
# Outlook/Office365: EMAIL_HOST = 'smtp.office365.com', EMAIL_PORT = 587, EMAIL_USE_TLS = True
# Amazon SES: EMAIL_HOST = 'email-smtp.{region}.amazonaws.com', EMAIL_PORT = 587, EMAIL_USE_TLS = True

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

# Get STATIC_URL from environment or default to '/static/'
STATIC_URL = os.environ.get('STATIC_URL', '/static/')

# List of directories where Django will look for static files
STATICFILES_DIRS = [
    BASE_DIR / "core" / "static",
]

# Directory where static files will be collected
STATIC_ROOT = os.environ.get('STATIC_ROOT', os.path.join(BASE_DIR, "staticfiles"))

# Make sure the directory exists
os.makedirs(STATIC_ROOT, exist_ok=True)

# Print static files configuration for debugging (will show in logs)
print(f"Static files configuration:")
print(f"STATIC_URL: {STATIC_URL}")
print(f"STATIC_ROOT: {STATIC_ROOT}")
print(f"STATICFILES_DIRS: {STATICFILES_DIRS}")

# Use a simpler storage backend that doesn't require a manifest
# This resolves the "Missing staticfiles manifest entry" errors
STATICFILES_STORAGE = 'whitenoise.storage.CompressedStaticFilesStorage'

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# OpenAI API settings
OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY', '')

# AI Request Timeout setting
AI_REQUEST_TIMEOUT = int(os.environ.get('AI_REQUEST_TIMEOUT', 55))

# Add Razorpay settings
RAZORPAY_KEY_ID = os.environ.get('RAZORPAY_KEY_ID', 'rzp_test_7HVw0jZ1xbH7Zv')
RAZORPAY_KEY_SECRET = os.environ.get('RAZORPAY_KEY_SECRET', 'QyXs5O6YcQtv9mOGGjQ7qvRi')

# Authentication settings
LOGIN_URL = 'core:login'
LOGIN_REDIRECT_URL = 'core:dashboard'

# Security settings for production
if not DEBUG:
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SECURE = True
    SECURE_SSL_REDIRECT = True
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_REFERRER_POLICY = 'same-origin'
    
    # Rate limiting
    MIDDLEWARE.append('django.middleware.common.BrokenLinkEmailsMiddleware')

# Timeout settings
DATABASE_OPTIONS = {
    'timeout': 20,  # in seconds (PostgreSQL statement_timeout in milliseconds)
}

# HTTP request settings
DATA_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5 MB
DATA_UPLOAD_MAX_NUMBER_FIELDS = 1000
FILE_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5 MB

# Cache settings - memory-based for simplicity
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'desiq-cache',
        'TIMEOUT': 300,  # 5 minutes default timeout
        'OPTIONS': {
            'MAX_ENTRIES': 1000,  # Maximum number of entries in cache
        }
    }
}

# Cache middleware settings
CACHE_MIDDLEWARE_ALIAS = 'default'
CACHE_MIDDLEWARE_SECONDS = 300  # 5 minutes default cache time
CACHE_MIDDLEWARE_KEY_PREFIX = 'desiq'

# Session settings
SESSION_ENGINE = 'django.contrib.sessions.backends.db'  # Use db backend instead of cached_db to avoid cache issues
SESSION_COOKIE_AGE = 86400  # 24 hours in seconds
SESSION_SAVE_EVERY_REQUEST = False  # Set to False to reduce DB writes
SESSION_COOKIE_SECURE = not DEBUG  # Secure cookies in production
SESSION_COOKIE_HTTPONLY = True  # HttpOnly cookies for security
SESSION_COOKIE_SAMESITE = 'Lax'  # SameSite protection
MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'
SESSION_SERIALIZER = 'django.contrib.sessions.serializers.JSONSerializer'  # More efficient serializer

# Add session optimization settings to reduce database writes
SESSION_EXPIRE_AT_BROWSER_CLOSE = False
SESSION_SAVE_EVERY_REQUEST = False  # Ensure this is False to reduce DB writes
SESSION_COOKIE_NAME = 'sessionid'
SESSION_COOKIE_DOMAIN = None
SESSION_CACHE_ALIAS = 'default'
SESSION_COOKIE_PATH = '/'

# Logging Configuration
# Use different logging settings for development and production
if DEBUG:
    # Development logging - includes file logging
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'verbose': {
                'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
                'style': '{',
            },
            'simple': {
                'format': '{levelname} {message}',
                'style': '{',
            },
        },
        'filters': {
            'require_debug_true': {
                '()': 'django.utils.log.RequireDebugTrue',
            },
            'require_debug_false': {
                '()': 'django.utils.log.RequireDebugFalse',
            },
        },
        'handlers': {
            'console': {
                'level': 'INFO',
                'class': 'logging.StreamHandler',
                'formatter': 'simple',
            },
            'file': {
                'level': 'ERROR',
                'class': 'logging.FileHandler',
                'filename': os.path.join(BASE_DIR, 'logs/django_error.log'),
                'formatter': 'verbose',
            },
        },
        'loggers': {
            'django': {
                'handlers': ['console', 'file'],
                'level': 'DEBUG',
                'propagate': True,
            },
            'django.request': {
                'handlers': ['file'],
                'level': 'ERROR',
                'propagate': False,
            },
            'core': {
                'handlers': ['console', 'file'],
                'level': 'INFO',
                'propagate': True,
            },
        },
    }
else:
    # Production logging - console only, no file logging
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'verbose': {
                'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
                'style': '{',
            },
            'simple': {
                'format': '{levelname} {message}',
                'style': '{',
            },
        },
        'handlers': {
            'console': {
                'level': 'INFO',
                'class': 'logging.StreamHandler',
                'formatter': 'verbose',
            },
        },
        'loggers': {
            'django': {
                'handlers': ['console'],
                'level': 'INFO',
                'propagate': True,
            },
            'django.request': {
                'handlers': ['console'],
                'level': 'ERROR',
                'propagate': False,
            },
            'core': {
                'handlers': ['console'],
                'level': 'INFO',
                'propagate': True,
            },
            'django.security': {
                'handlers': ['console'],
                'level': 'INFO',
                'propagate': True,
            },
            'whitenoise': {
                'handlers': ['console'],
                'level': 'DEBUG',
                'propagate': True,
            },
            'social_core': {
                'handlers': ['console'],
                'level': 'DEBUG',
                'propagate': True,
            },
        },
    }

# Cron jobs for scheduled tasks - these won't work directly on Render
# You'll need to use a scheduled task instead
CRONJOBS = [
    # Reset daily limits at midnight (0 0 * * *)
    ('0 0 * * *', 'core.management.commands.reset_daily_limits.Command.handle', '>> /tmp/reset_daily_limits.log'),
]

# Request timeout setting (in seconds)
REQUEST_TIMEOUT = 60

# Add TimeoutMiddleware for non-DEBUG environments
if not DEBUG:
    MIDDLEWARE.insert(2, 'core.middleware.TimeoutMiddleware')
    MIDDLEWARE.insert(2, 'core.middleware.WorkerTimeoutMiddleware')  # Add Worker Timeout middleware

# Worker timeout settings - optimized for memory-constrained environment
WORKER_TIME_LIMIT = 55  # 55 seconds (below Gunicorn's 60s timeout)
WORKER_MEMORY_LIMIT_MB = 450  # 450 MB memory limit
AI_REQUEST_TIMEOUT = 50  # 50 seconds for AI endpoints
MAX_CONCURRENT_AI_REQUESTS = 3  # Maximum concurrent AI requests

# AI model settings - reducing complexity to prevent timeouts
AI_MODEL_MAX_TOKENS = {
    'scenario': 600,
    'question': 200,
    'evaluation': 200,
    'report': 800,
}
AI_MODEL_NAME = "gpt-4o-mini"  # Use a smaller, faster model

# Authentication backends
AUTHENTICATION_BACKENDS = (
    'social_core.backends.google.GoogleOAuth2',  # Google OAuth2
    'social_core.backends.github.GithubOAuth2',  # GitHub OAuth
    'django.contrib.auth.backends.ModelBackend',  # Django default
    'core.backends.EmailBackend',  # Custom email authentication
)



# Social auth settings
SOCIAL_AUTH_URL_NAMESPACE = 'social'
LOGIN_URL = 'core:login'
LOGIN_REDIRECT_URL = 'core:dashboard'
LOGOUT_URL = 'core:logout'
LOGOUT_REDIRECT_URL = 'core:home'

# Enforce email uniqueness for social auth
SOCIAL_AUTH_FORCE_EMAIL_VALIDATION = True
SOCIAL_AUTH_UNIQUE_EMAIL = True
SOCIAL_AUTH_PROTECTED_USER_FIELDS = ['email']

# Social auth error handling
SOCIAL_AUTH_LOGIN_ERROR_URL = '/social-auth-error/'
SOCIAL_AUTH_BACKEND_ERROR_URL = '/social-auth-error/'
SOCIAL_AUTH_RAISE_EXCEPTIONS = False

# Google OAuth2 settings
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = os.environ.get('GOOGLE_OAUTH2_KEY', '')
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = os.environ.get('GOOGLE_OAUTH2_SECRET', '')
SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = ['email', 'profile']

# Log OAuth credentials (masked) to verify they exist
has_google_key = bool(SOCIAL_AUTH_GOOGLE_OAUTH2_KEY)
has_google_secret = bool(SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET)
print(f"Google OAuth2 credentials available: Key={has_google_key}, Secret={has_google_secret}")
if not has_google_key or not has_google_secret:
    print("WARNING: Google OAuth2 credentials are missing. Social login will not work!")

# GitHub OAuth settings
SOCIAL_AUTH_GITHUB_KEY = os.environ.get('GITHUB_KEY', '')
# print(f"GitHub OAuth Key: {SOCIAL_AUTH_GITHUB_KEY}")  # Debugging line
SOCIAL_AUTH_GITHUB_SECRET = os.environ.get('GITHUB_SECRET', '')
# print(f"GitHub OAuth Secret: {SOCIAL_AUTH_GITHUB_SECRET}")  # Debugging line
SOCIAL_AUTH_GITHUB_SCOPE = ['user:email']

# Social auth pipeline
SOCIAL_AUTH_PIPELINE = (
    # Add our debug function at the beginning
    'core.social_auth_pipeline.debug_social_auth',
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    'social_core.pipeline.social_auth.social_user',
    # Check if email already exists before proceeding
    'core.pipeline.email_exists',
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.user.create_user',
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
    # Add our custom notification function
    'core.social_auth_pipeline.send_welcome_notification',
)

# Static files optimization
WHITENOISE_MAX_AGE = 604800  # 1 week

# Jazzmin Admin Configuration
JAZZMIN_SETTINGS = {
    "site_title": "Desiq Admin",
    "site_header": "Desiq",
    "site_brand": "Desiq",
    "site_logo": "img/digital-brain-logo.svg",
    "login_logo": None,
    "login_logo_dark": None,
    "site_logo_classes": "img-circle",
    "site_icon": None,
    "welcome_sign": "Welcome to the Desiq Admin Portal",
    "copyright": "Desiq Ltd",
    "search_model": ["auth.User", "core.Profile", "core.Scenario"],
    "user_avatar": None,
    "topmenu_links": [
        {"name": "Home", "url": "admin:index", "permissions": ["auth.view_user"]},
        {"name": "Support", "url": "core:admin_support_tickets", "permissions": ["auth.view_user"]},
        {"name": "Analytics", "url": "core:admin_analytics_dashboard", "permissions": ["auth.view_user"]},
        {"name": "System Status", "url": "core:admin_system_status", "permissions": ["auth.view_user"]},
        {"name": "View Site", "url": "core:home", "new_window": True},
    ],
    "usermenu_links": [
        {"name": "Support", "url": "core:admin_support_tickets", "new_window": True},
    ],
    "show_sidebar": True,
    "navigation_expanded": False,
    "hide_apps": [],
    "hide_models": [
        "core.ChatRoom", 
        "core.ChatMessage"
    ],
    "order_with_respect_to": [
        "auth", 
        "core.UserManagement",
        "core.ContentManagement",
        "core.Engagement",
        "core.Support",
        "core.Analytics",
        "django_celery_beat",
        "django_celery_results",
        "social_django",
    ],
    "custom_links": {
        "core": [{
            "name": "Dashboard", 
            "url": "core:admin_dashboard",
            "icon": "fas fa-tachometer-alt",
        }],
        "django_celery_beat": [{
            "name": "Task Schedule", 
            "url": "admin:django_celery_beat_periodictask_changelist",
            "icon": "fas fa-calendar-alt",
        }]
    },
    "icons": {
        "auth": "fas fa-shield-alt",
        "auth.user": "fas fa-user",
        "auth.Group": "fas fa-users",
        
        "core.UserManagement": "fas fa-users-cog",
        "core.Profile": "fas fa-id-card",
        "core.UserActivity": "fas fa-user-clock",
        "core.UserTestResult": "fas fa-clipboard-check",
        "core.UserScenarioProgress": "fas fa-tasks",
        
        "core.ContentManagement": "fas fa-file-alt",
        "core.Scenario": "fas fa-book",
        "core.ScenarioOption": "fas fa-list-ul",
        "core.PersonalityTest": "fas fa-brain",
        "core.PersonalityTestQuestion": "fas fa-question-circle",
        "core.PersonalityTestResult": "fas fa-chart-pie",
        "core.Mentor": "fas fa-chalkboard-teacher",
        "core.Item": "fas fa-box",
        
        "core.Engagement": "fas fa-comment-dots",
        "core.DailyChallenge": "fas fa-calendar-check",
        "core.CommunityMessage": "fas fa-users",
        
        "core.Support": "fas fa-life-ring",
        "core.SupportIssue": "fas fa-headset",
        "core.IssueComment": "fas fa-reply",
        
        "core.Analytics": "fas fa-chart-line",
        
        "django_celery_beat": "fas fa-clock",
        "django_celery_beat.periodictask": "fas fa-tasks",
        "django_celery_beat.intervalschedule": "fas fa-hourglass",
        "django_celery_beat.crontabschedule": "fas fa-calendar",
        "django_celery_beat.solarschedule": "fas fa-sun",
        "django_celery_beat.clockedschedule": "fas fa-clock",
        
        "django_celery_results": "fas fa-clipboard-list",
        "django_celery_results.taskresult": "fas fa-check-square",
        "django_celery_results.groupresult": "fas fa-layer-group",
        
        "social_django": "fab fa-expeditedssl",
        "social_django.association": "fab fa-connectdevelop",
        "social_django.nonce": "fas fa-key",
        "social_django.usersocialauth": "fab fa-google",
    },
    "default_icon_parents": "fas fa-folder",
    "default_icon_children": "fas fa-circle",
    "related_modal_active": True,
    "custom_css": None,
    "custom_js": None,
    "show_ui_builder": False,
    "changeform_format": "horizontal_tabs",
    "changeform_format_overrides": {
        "auth.user": "collapsible",
        "auth.group": "vertical_tabs",
        "core.scenario": "collapsible",
        "core.personalitytest": "collapsible",
    },
    "language_chooser": False,
    # Group models together into custom app sections
    "models": {
        "core.UserManagement": {
            "models": [
                "auth.User", 
                "core.Profile", 
                "core.UserActivity", 
                "core.UserTestResult",
                "core.UserScenarioProgress"
            ],
            "icon": "fas fa-users-cog"
        },
        "core.ContentManagement": {
            "models": [
                "core.Scenario", 
                "core.ScenarioOption", 
                "core.PersonalityTest", 
                "core.PersonalityTestQuestion", 
                "core.PersonalityTestResult",
                "core.Mentor",
                "core.Item"
            ],
            "icon": "fas fa-file-alt"
        },
        "core.Engagement": {
            "models": [
                "core.DailyChallenge",
                "core.CommunityMessage"
            ],
            "icon": "fas fa-comment-dots"
        },
        "core.Support": {
            "models": [
                "core.SupportIssue",
                "core.IssueComment"
            ],
            "icon": "fas fa-life-ring"
        },
        "core.Analytics": {
            "models": [],
            "icon": "fas fa-chart-line"
        },
        "django_celery_beat.TaskSchedules": {
            "models": [
                "django_celery_beat.PeriodicTask", 
                "django_celery_beat.IntervalSchedule", 
                "django_celery_beat.CrontabSchedule", 
                "django_celery_beat.SolarSchedule", 
                "django_celery_beat.ClockedSchedule"
            ],
            "icon": "fas fa-clock"
        },
        "django_celery_results.Results": {
            "models": [
                "django_celery_results.TaskResult",
                "django_celery_results.GroupResult"
            ],
            "icon": "fas fa-clipboard-list"
        }
    }
}

JAZZMIN_UI_TWEAKS = {
    "navbar_small_text": False,
    "footer_small_text": False,
    "body_small_text": False,
    "brand_small_text": False,
    "brand_colour": "navbar-primary",
    "accent": "accent-primary",
    "navbar": "navbar-dark",
    "no_navbar_border": False,
    "navbar_fixed": True,
    "layout_boxed": False,
    "footer_fixed": False,
    "sidebar_fixed": True,
    "sidebar": "sidebar-dark-primary",
    "sidebar_nav_small_text": False,
    "sidebar_disable_expand": False,
    "sidebar_nav_child_indent": False,
    "sidebar_nav_compact_style": False,
    "sidebar_nav_legacy_style": False,
    "sidebar_nav_flat_style": False,
    "theme": "default",
    "dark_mode_theme": "darkly",
    "button_classes": {
        "primary": "btn-primary",
        "secondary": "btn-secondary",
        "info": "btn-info",
        "warning": "btn-warning",
        "danger": "btn-danger",
        "success": "btn-success"
    }
}

# Guardian settings
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'guardian.backends.ObjectPermissionBackend',
    'social_core.backends.google.GoogleOAuth2',  # Add Google OAuth2 backend
    'social_core.backends.github.GithubOAuth2',  # Add GitHub OAuth2 backend
    # ... any existing backends ...
]
